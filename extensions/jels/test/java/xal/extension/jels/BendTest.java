package xal.extension.jels;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import xal.extension.jels.smf.ESSElementFactory;
import xal.extension.jels.smf.impl.ESSBend;
import xal.model.ModelException;
import xal.model.probe.Probe;
import xal.sim.scenario.ElementMapping;
import xal.smf.AcceleratorSeq;
import xal.smf.attr.ApertureBucket;
import xal.smf.impl.qualify.MagnetType;
import xal.tools.beam.IConstants;

@RunWith(Parameterized.class)
public class BendTest extends TestCommon {

    private double errTolerance = 2e-5;

    public BendTest(Probe probe, ElementMapping elementMapping) {
        super(probe, elementMapping);
    }

    /**
     * Test used for madx comparison.
     *
     *
     */
// 	@Test
    public void doHorizontalBendTestMadX() throws InstantiationException, ModelException {
        probe.reset();
        System.out.println("Horizontal madx");

        AcceleratorSeq sequence = bend(-5.5, -11, -5.5, 9375.67, 0., 0, 0., 0, 0., 0, 0, 0);

        run(sequence);

//		printResults();
//		checkTWTransferMatrix(new double[][]{});
    }

    @Test
    public void doVerticalBendTest() throws InstantiationException, ModelException {
        probe.reset();
        System.out.println("Vertical");
        /*
		EDGE -5.5 9375.67 50 0.45 2.8 50 1; this is a magnet length of 1.8 m 
		BEND -11 9375.67 0 50 1
		EDGE -5.5 9375.67 50 0.45 2.8 50 1
         */
        AcceleratorSeq sequence = bend(-5.5, -11, -5.5, 9375.67, 0., 50, 0.45, 2.80, 0.45, 2.80, 50, 1);

        run(sequence);

        //printResults();
        if (initialEnergy == 3e6) {
//			checkELSResults(1.799999E+00, new double[] {6.182466E-03, 5.210289E-03, 5.142904E-03},
//					new double [] { 1.458045E+01, 1.039017E+01, 7.424592E+00}, errTolerance); // when halfMag=true

            checkTWTransferMatrix(new double[][]{
                {+1.018958e+00, +1.799999e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+2.126416e-02, +1.018958e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +9.632544e-01, +1.788962e+00, +0.000000e+00, -1.722575e-01},
                {+0.000000e+00, +0.000000e+00, -4.032563e-02, +9.632544e-01, +0.000000e+00, -1.890399e-01},
                {+0.000000e+00, +0.000000e+00, +1.890399e-01, +1.722575e-01, +1.000000e+00, +1.777507e+00},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(1.003197291, new double[][]{
                {+3.822288e-11, +2.081295e-11, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+2.081295e-11, +1.151277e-11, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +2.730380e-11, +1.338170e-11, +9.152883e-13, -9.096619e-13},
                {+0.000000e+00, +0.000000e+00, +1.338170e-11, +6.868014e-12, -7.836318e-13, -9.982870e-13},
                {+0.000000e+00, +0.000000e+00, +9.152883e-13, -7.836318e-13, +2.675748e-11, +1.126873e-11},
                {+0.000000e+00, +0.000000e+00, -9.096619e-13, -9.982870e-13, +1.126873e-11, +5.280827e-12}
            }, errTolerance);
        }
        if (initialEnergy == 2.5e9) {
            checkTWTransferMatrix(new double[][]{
                {+1.018958e+00, +1.799999e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+2.126416e-02, +1.018958e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +9.632544e-01, +1.788962e+00, +0.000000e+00, -1.722575e-01},
                {+0.000000e+00, +0.000000e+00, -4.032563e-02, +9.632544e-01, +0.000000e+00, -1.890399e-01},
                {+0.000000e+00, +0.000000e+00, +1.890399e-01, +1.722575e-01, +1.000000e+00, +1.230120e-01},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(3.664409209, new double[][]{
                {8.676999E-13, 4.724759E-13, 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,},
                {4.724759E-13, 2.613519E-13, 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,},
                {0.000000E+00, 0.000000E+00, 1.253617E-12, 9.993184E-13, -4.891073E-13, -3.699851E-12,},
                {0.000000E+00, 0.000000E+00, 9.993184E-13, 9.192149E-13, -5.773509E-13, -4.060314E-12,},
                {0.000000E+00, 0.000000E+00, -4.891073E-13, -5.773509E-13, 5.433620E-13, 3.215720E-12,},
                {0.000000E+00, 0.000000E+00, -3.699851E-12, -4.060314E-12, 3.215720E-12, 2.147787E-11,},}, errTolerance);
        }
    }

    @Test
    public void doHorizontalBendTest() throws InstantiationException, ModelException {
        probe.reset();
        System.out.println("Horizontal");
        /*
		EDGE -5.5 9375.67 50 0.45 2.8 50 0; this is a magnet length of 1.8 m 
		BEND -11 9375.67 0 50 0
		EDGE -5.5 9375.67 50 0.45 2.8 50 0
         */
        AcceleratorSeq sequence = bend(-5.5, -11, -5.5, 9375.67, 0., 50, 0.45, 2.80, 0.45, 2.80, 50, 0);

        run(sequence);

        //printResults();
        if (initialEnergy == 3e6) {
//			checkELSResults(1.799999E+00, new double[] {6.132800E-03, 5.266670E-03, 5.142904E-03},
//					new double [] { 1.434713E+01, 1.061625E+01, 7.424592E+00}, errTolerance); 

            checkTWTransferMatrix(new double[][]{
                {+9.632544e-01, +1.788962e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.722575e-01},
                {-4.032563e-02, +9.632544e-01, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.890399e-01},
                {+0.000000e+00, +0.000000e+00, +1.018958e+00, +1.799999e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +2.126416e-02, +1.018958e+00, +0.000000e+00, +0.000000e+00},
                {+1.890399e-01, +1.722575e-01, +0.000000e+00, +0.000000e+00, +1.000000e+00, +1.777507e+00},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(1.003197291, new double[][]{
                {+3.776793e-11, +1.961660e-11, +0.000000e+00, +0.000000e+00, +1.819416e-12, -9.096619e-13},
                {+1.961660e-11, +1.042412e-11, +0.000000e+00, +0.000000e+00, -2.175526e-13, -9.982870e-13},
                {+0.000000e+00, +0.000000e+00, +2.773781e-11, +1.426590e-11, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +1.426590e-11, +7.583238e-12, +0.000000e+00, +0.000000e+00},
                {+1.819416e-12, -2.175526e-13, +0.000000e+00, +0.000000e+00, +2.683088e-11, +1.126873e-11},
                {-9.096619e-13, -9.982870e-13, +0.000000e+00, +0.000000e+00, +1.126873e-11, +5.280827e-12},}, errTolerance);
        }
        if (initialEnergy == 2.5e9) {
            checkTWTransferMatrix(new double[][]{
                {+9.632544e-01, +1.788962e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.722575e-01},
                {-4.032563e-02, +9.632544e-01, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.890399e-01},
                {+0.000000e+00, +0.000000e+00, +1.018958e+00, +1.799999e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +2.126416e-02, +1.018958e+00, +0.000000e+00, +0.000000e+00},
                {+1.890399e-01, +1.722575e-01, +0.000000e+00, +0.000000e+00, +1.000000e+00, +1.230120e-01},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(3.664409209, new double[][]{
                {1.491164E-12, 1.140857E-12, 0.000000E+00, 0.000000E+00, -4.685826E-13, -3.699851E-12,},
                {1.140857E-12, 9.999424E-13, 0.000000E+00, 0.000000E+00, -5.645003E-13, -4.060314E-12,},
                {0.000000E+00, 0.000000E+00, 6.296777E-13, 3.238510E-13, 0.000000E+00, 0.000000E+00,},
                {0.000000E+00, 0.000000E+00, 3.238510E-13, 1.721475E-13, 0.000000E+00, 0.000000E+00,},
                {-4.685826E-13, -5.645003E-13, 0.000000E+00, 0.000000E+00, 5.450283E-13, 3.215720E-12,},
                {-3.699851E-12, -4.060314E-12, 0.000000E+00, 0.000000E+00, 3.215720E-12, 2.147787E-11,},}, errTolerance);
        }
    }

    @Test
    public void doHorizontalBendTest2() throws InstantiationException, ModelException {
        probe.reset();
        System.out.println("Horizontal N=0.2");
        /*
		EDGE -5.5 9375.67 50 0.45 2.8 50 0; this is a magnet length of 1.8 m 
		BEND -11 9375.67 0.2 50 0
		EDGE -5.5 9375.67 50 0.45 2.8 50 0
         */
        AcceleratorSeq sequence = bend(-5.5, -11, -5.5, 9375.67, 0.2, 50, 0.45, 2.80, 0.45, 2.80, 50, 0);

        run(sequence);

        //printResults();
        if (initialEnergy == 3e6) {
//			checkELSResults(1.799999E+00, new double[] {6.132800E-03, 5.266670E-03, 5.142904E-03},
//					new double [] { 1.434713E+01, 1.061625E+01, 7.424592E+00}, errTolerance); 

            checkTWTransferMatrix(new double[][]{
                {+9.668973e-01, +1.791166e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.723634e-01},
                {-3.635045e-02, +9.668973e-01, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.892739e-01},
                {+0.000000e+00, +0.000000e+00, +1.015251e+00, +1.797789e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +1.709594e-02, +1.015251e+00, +0.000000e+00, +0.000000e+00},
                {+1.892739e-01, +1.723634e-01, +0.000000e+00, +0.000000e+00, +1.000000e+00, +1.777503e+00},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(1.003197291, new double[][]{
                {+3.786796e-11, +1.972151e-11, +0.000000e+00, +0.000000e+00, +1.825838e-12, -9.102212e-13},
                {+1.972151e-11, +1.050564e-11, +0.000000e+00, +0.000000e+00, -2.108931e-13, -9.995228e-13},
                {+0.000000e+00, +0.000000e+00, +2.765705e-11, +1.418382e-11, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +1.418382e-11, +7.520955e-12, +0.000000e+00, +0.000000e+00},
                {+1.825838e-12, -2.108931e-13, +0.000000e+00, +0.000000e+00, +2.683131e-11, +1.126871e-11},
                {-9.102212e-13, -9.995228e-13, +0.000000e+00, +0.000000e+00, +1.126871e-11, +5.280827e-12},}, errTolerance);
        }
        if (initialEnergy == 2.5e9) {
            checkTWTransferMatrix(new double[][]{
                {+9.668973e-01, +1.791166e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.723634e-01},
                {-3.635045e-02, +9.668973e-01, +0.000000e+00, +0.000000e+00, +0.000000e+00, -1.892739e-01},
                {+0.000000e+00, +0.000000e+00, +1.015251e+00, +1.797789e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +1.709594e-02, +1.015251e+00, +0.000000e+00, +0.000000e+00},
                {+1.892739e-01, +1.723634e-01, +0.000000e+00, +0.000000e+00, +1.000000e+00, +1.230079e-01},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(3.664409209, new double[][]{
                {1.494214E-12, 1.144528E-12, 0.000000E+00, 0.000000E+00, -4.687354E-13, -3.702126E-12,},
                {1.144528E-12, 1.003684E-12, 0.000000E+00, 0.000000E+00, -5.650253E-13, -4.065340E-12,},
                {0.000000E+00, 0.000000E+00, 6.278443E-13, 3.219878E-13, 0.000000E+00, 0.000000E+00,},
                {0.000000E+00, 0.000000E+00, 3.219878E-13, 1.707336E-13, 0.000000E+00, 0.000000E+00,},
                {-4.687354E-13, -5.650253E-13, 0.000000E+00, 0.000000E+00, 5.450139E-13, 3.215633E-12,},
                {-3.702126E-12, -4.065340E-12, 0.000000E+00, 0.000000E+00, 3.215633E-12, 2.147787E-11,},}, errTolerance);
        }
    }

    @Test
    public void doVerticalBendTest2() throws InstantiationException, ModelException {
        probe.reset();
        System.out.println("Vertical N=0.9");
        /*
		EDGE -5.5 9375.67 50 0.45 2.8 50 1; this is a magnet length of 1.8 m 
		BEND -11 9375.67 0.9 50 1
		EDGE -5.5 9375.67 50 0.45 2.8 50 1
         */
        AcceleratorSeq sequence = bend(-5.5, -11, -5.5, 9375.67, 0.9, 50, 0.45, 2.80, 0.45, 2.80, 50, 1);

        run(sequence);

        //printResults();
        if (initialEnergy == 3e6) {
            checkTWTransferMatrix(new double[][]{
                {+1.002313e+00, +1.790064e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+2.587002e-03, +1.002313e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +9.796828e-01, +1.798894e+00, +0.000000e+00, -1.727345e-01},
                {+0.000000e+00, +0.000000e+00, -2.235906e-02, +9.796828e-01, +0.000000e+00, -1.900943e-01},
                {+0.000000e+00, +0.000000e+00, +1.900943e-01, +1.727345e-01, +1.000000e+00, +1.777489e+00},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(1.003197291, new double[][]{
                {+3.776964e-11, +2.032777e-11, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+2.032777e-11, +1.112244e-11, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +2.766317e-11, +1.373920e-11, +9.388964e-13, -9.121809e-13},
                {+0.000000e+00, +0.000000e+00, +1.373920e-11, +7.129682e-12, -7.619018e-13, -1.003855e-12},
                {+0.000000e+00, +0.000000e+00, +9.388964e-13, -7.619018e-13, +2.675914e-11, +1.126863e-11},
                {+0.000000e+00, +0.000000e+00, -9.121809e-13, -1.003855e-12, +1.126863e-11, +5.280827e-12},}, errTolerance);
        }
        if (initialEnergy == 2.5e9) {
            checkTWTransferMatrix(new double[][]{
                {+1.002313e+00, +1.790064e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+2.587002e-03, +1.002313e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00},
                {+0.000000e+00, +0.000000e+00, +9.796828e-01, +1.798894e+00, +0.000000e+00, -1.727345e-01},
                {+0.000000e+00, +0.000000e+00, -2.235906e-02, +9.796828e-01, +0.000000e+00, -1.900943e-01},
                {+0.000000e+00, +0.000000e+00, +1.900943e-01, +1.727345e-01, +1.000000e+00, +1.229937e-01},
                {+0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +0.000000e+00, +1.000000e+00},}, errTolerance);

            checkTWResults(3.66447233145, new double[][]{
                {8.574107E-13, 4.614619E-13, 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,},
                {4.614619E-13, 2.524912E-13, 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,},
                {0.000000E+00, 0.000000E+00, 1.265290E-12, 1.013250E-12, -4.899157E-13, -3.710096E-12,},
                {0.000000E+00, 0.000000E+00, 1.013250E-12, 9.336937E-13, -5.799043E-13, -4.082961E-12,},
                {0.000000E+00, 0.000000E+00, -4.899157E-13, -5.799043E-13, 5.432912E-13, 3.215326E-12,},
                {0.000000E+00, 0.000000E+00, -3.710096E-12, -4.082961E-12, 3.215326E-12, 2.147787E-11,},}, errTolerance);
        }
    }

    /**
     *
     * @param entry_angle_deg
     * @param alpha_deg angle in degrees
     * @param exit_angle_deg
     * @param rho absolute curvature radius
     * @param N field Index
     * @param G gap
     * @param entrK1
     * @param entrK2
     * @param exitK1
     * @param exitK2
     * @param R aperture
     * @param HV 0 - horizontal, 1 - vertical
     * @return sequence
     */
    public AcceleratorSeq bend(double entry_angle_deg, double alpha_deg, double exit_angle_deg, double rho,
            double N, double G, double entrK1, double entrK2, double exitK1, double exitK2, double R, int HV) {
        AcceleratorSeq sequence = new AcceleratorSeq("BendTest");

        // mm -> m
        rho *= 1e-3;
        G *= 1e-3;
        R *= 1e-3;

        // calculations		
        double len = Math.abs(rho * alpha_deg * Math.PI / 180.0);
        double quadComp = -N / (rho * rho);

        // following are used to calculate field		
        double c = IConstants.LightSpeed;
        double e = probe.getSpeciesCharge();
        double Er = probe.getSpeciesRestEnergy();
        double gamma = probe.getGamma();
        double b = probe.getBeta();

        double k = b * gamma * Er / (e * c); // = -0.22862458629665997
        int orientation = HV == 0 ? MagnetType.HORIZONTAL : MagnetType.VERTICAL;

        ESSBend bend = ESSElementFactory.createESSBend("b", alpha_deg, k, rho, entry_angle_deg, exit_angle_deg, entrK1, entrK2,
                exitK1, exitK2, quadComp, new ApertureBucket(), null, orientation, G, len / 2.);

        sequence.addNode(bend);
        sequence.setLength(len);

        return sequence;
    }

}
