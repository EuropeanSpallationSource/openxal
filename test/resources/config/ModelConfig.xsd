<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0">

	<xs:complexType name="className">
		<xs:annotation>
			<xs:documentation>
				Implementation xal.sim.cfg.ClassNameList, DataItem<br/>			
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="type" type="xs:string" use="required"/>
	</xs:complexType>
	
	<xs:complexType name="hardware">
		<xs:sequence>
			<xs:element name="thin" type="className" maxOccurs="unbounded"/>				
			<xs:element name="thick" type="className" maxOccurs="unbounded"/>
			<xs:element name="split" type="xs:string"/> <!--unused-->
		</xs:sequence>	
	</xs:complexType>
	
	<xs:complexType name="synchronize">			
		<xs:annotation>
			<xs:documentation>
				Implementation: xal.sim.cfg.SynchronizationMap<br/>
				<p>
					This class essentially defines the configuration of a <i>synchronization mode</i>.  It is a set of parameter
					mappings between a hardware device and its corresponding modeling element.  It is assumed that how the mappings are
					used depends upon the <em>mode</em> being defined.
				</p>
				<p>
					It is also assumed that this class will be instantiate according to the configuration file used by the modeling 
					scenario generator.  Thus, the lack of initializing methods.
				</p>						
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="parameter" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						Implementation xal.sim.cfg.ParameterMap<br/>
						Represents a parameter association between the hardware and the modeling element of the outer class. Basically this consists 
						of the matching "<i>getter</i>" method of the hardware device to the appropriate "<i>setter</i>" 
						method of the modeling element.
						There may be many parameter associations between a hardware device and modeling element, or there may be none.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>			
					<xs:attribute name="type" type="xs:string" use="required"/>
					<xs:attribute name="name" type="xs:string" use="required"/>
					<xs:attribute name="mset" type="xs:string" use="required"/>
					<xs:attribute name="hget" type="xs:string" use="required"/>
				</xs:complexType>
			</xs:element>					
		</xs:sequence>
		<xs:attribute name="mode" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="INIT"/>
					<xs:enumeration value="LIVE"/>
					<xs:enumeration value="DESIGN"/>
					<xs:enumeration value="RF_DESIGN"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>								
	</xs:complexType>
	
	<xs:complexType name="property">
		<xs:attribute name="value" type="xs:byte" use="required"/>
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>
	
	<xs:complexType name="associations-map">		
		<xs:annotation>
			<xs:documentation>
				Implementation: xal.sim.cfg.AssociationDef<br/>
				An <code>AssociationDef</code> object is a mapping between a hardware device derived from
				<code>{@link AcceleratorNode}</code> to its corresponding modeling element which exposes the 
				<code>{@link IElement}</code> interface.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="static" minOccurs="0"> <!--unused-->
				<xs:complexType>
					<xs:sequence>
						<xs:element name="property" type="property"/>							
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="synchronize" type="synchronize" minOccurs="0" maxOccurs="unbounded"/>				
		</xs:sequence>
		<xs:attribute name="smf" type="xs:string" use="required"/>
		<xs:attribute name="model" type="xs:string" use="required"/>	
	</xs:complexType>
	
	<xs:element name="configuration">
		<xs:annotation>
			<xs:documentation>
				Implementation: xal.sim.cfg.ModelConfiguration<br/>
				Maintains all the configuration management information for lattice generation.  The configuration details are
				loaded from the lattice generation configuration files then built into this managing data structure. 
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="elements"> <!-- unused -->
					<xs:complexType>
						<xs:sequence>
							<xs:element name="default" type="className"/>
							<xs:element name="drift" type="className"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="hardware" type="hardware" />					
				<xs:element name="associations">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.sim.cfg.ArchiveItemList<br/>
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="map" type="associations-map" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>
